// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	order "project/e-commerce/features/order"

	mock "github.com/stretchr/testify/mock"
)

// DataOrderInterface is an autogenerated mock type for the DataInterface type
type DataOrderInterface struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: token, status
func (_m *DataOrderInterface) CancelOrder(token int, status string) (int, error) {
	ret := _m.Called(token, status)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string) int); ok {
		r0 = rf(token, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(token, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: token, data, dataPay
func (_m *DataOrderInterface) InsertData(token int, data order.AddressCore, dataPay order.PaymentCore) (int, error) {
	ret := _m.Called(token, data, dataPay)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, order.AddressCore, order.PaymentCore) int); ok {
		r0 = rf(token, data, dataPay)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, order.AddressCore, order.PaymentCore) error); ok {
		r1 = rf(token, data, dataPay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectOrder provides a mock function with given fields: token
func (_m *DataOrderInterface) SelectOrder(token int) ([]order.HistoryOrder, error) {
	ret := _m.Called(token)

	var r0 []order.HistoryOrder
	if rf, ok := ret.Get(0).(func(int) []order.HistoryOrder); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.HistoryOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: token, status
func (_m *DataOrderInterface) UpdateStatus(token int, status string) (int, error) {
	ret := _m.Called(token, status)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string) int); ok {
		r0 = rf(token, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(token, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDataOrderInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataOrderInterface creates a new instance of DataOrderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataOrderInterface(t mockConstructorTestingTNewDataOrderInterface) *DataOrderInterface {
	mock := &DataOrderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
