// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	product "project/e-commerce/features/product"

	mock "github.com/stretchr/testify/mock"
)

// DataProductInterface is an autogenerated mock type for the DataInterface type
type DataProductInterface struct {
	mock.Mock
}

// Edit provides a mock function with given fields: data, id
func (_m *DataProductInterface) Edit(data product.Core, id uint) (product.Core, error) {
	ret := _m.Called(data, id)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(product.Core, uint) product.Core); ok {
		r0 = rf(data, id)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(product.Core, uint) error); ok {
		r1 = rf(data, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *DataProductInterface) GetAll() ([]product.Core, error) {
	ret := _m.Called()

	var r0 []product.Core
	if rf, ok := ret.Get(0).(func() []product.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *DataProductInterface) GetByID(id uint) (product.Core, error) {
	ret := _m.Called(id)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(uint) product.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMy provides a mock function with given fields: token
func (_m *DataProductInterface) GetMy(token uint) ([]product.Core, error) {
	ret := _m.Called(token)

	var r0 []product.Core
	if rf, ok := ret.Get(0).(func(uint) []product.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: data
func (_m *DataProductInterface) Insert(data product.Core) (product.Core, error) {
	ret := _m.Called(data)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(product.Core) product.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(product.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: id
func (_m *DataProductInterface) Remove(id uint) (product.Core, error) {
	ret := _m.Called(id)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(uint) product.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDataProductInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataProductInterface creates a new instance of DataProductInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataProductInterface(t mockConstructorTestingTNewDataProductInterface) *DataProductInterface {
	mock := &DataProductInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
